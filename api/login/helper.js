"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var httpCode;
(function (httpCode) {
    httpCode[httpCode["DEFAULT"] = 0] = "DEFAULT";
    httpCode[httpCode["NORMAL"] = 200] = "NORMAL";
    httpCode[httpCode["BIZ_ERROR"] = 400] = "BIZ_ERROR";
    httpCode[httpCode["COMMON_ERROR"] = 420] = "COMMON_ERROR";
    httpCode[httpCode["INTERNAL_ERROR"] = 500] = "INTERNAL_ERROR";
})(httpCode = exports.httpCode || (exports.httpCode = {}));
function mapCommonErrorType(commonErr) {
    for (var key in commonErr) {
        if (commonErr.hasOwnProperty(key) && commonErr[key]) {
            var err = __assign({}, commonErr[key], { kind: key });
            switch (key) {
                case 'genericError':
                    return err;
                case 'authError':
                    return err;
                case 'validateError':
                    return err;
                case 'bindError':
                    return err;
                default:
                    return null;
            }
        }
    }
    return null;
}
exports.mapCommonErrorType = mapCommonErrorType;
function errorHandling(err) {
    if (!err || err.response === undefined) {
        throw err;
    }
    var data;
    try {
        data = JSON.parse(err.response.data);
    }
    catch (e) {
        data = err.response.data;
    }
    switch (err.response.status) {
        case httpCode.BIZ_ERROR:
            return Promise.reject(__assign({}, err, { message: data.message }));
        case httpCode.COMMON_ERROR:
            var returnErr = mapCommonErrorType(data);
            if (!returnErr) {
                throw err;
            }
            return Promise.reject(__assign({}, err.response, returnErr));
        default:
            return Promise.reject(err);
    }
}
exports.errorHandling = errorHandling;
function encode(val) {
    return encodeURIComponent(val).
        replace(/%40/gi, '@').
        replace(/%3A/gi, ':').
        replace(/%24/g, '$').
        replace(/%2C/gi, ',').
        replace(/%20/g, '+').
        replace(/%5B/gi, '[').
        replace(/%5D/gi, ']');
}
exports.encode = encode;
function generateQueryUrl(url, params) {
    if (!params) {
        return url;
    }
    var parts = [];
    var _loop_1 = function (key) {
        var val = void 0;
        if (Object.prototype.hasOwnProperty(key)) {
            val = params[key];
        }
        if (val === null || typeof val === 'undefined') {
            return { value: '' };
        }
        var k, vals = void 0;
        if (val.toString() === '[object Array]') {
            k = key + '[]';
        }
        else {
            k = key;
            vals = [val];
        }
        vals.forEach(function (v) {
            if (v.toString() === '[object File]') {
                v = v.toISOString();
            }
            else if (typeof v === 'object') {
                v = JSON.stringify(v);
            }
            parts.push(encode(k) + '=' + encode(v));
        });
    };
    for (var key in params) {
        var state_1 = _loop_1(key);
        if (typeof state_1 === "object")
            return state_1.value;
    }
    var serializedParams = parts.join('&');
    if (serializedParams) {
        url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
    }
    return url;
}
exports.generateQueryUrl = generateQueryUrl;
function generateUrl(url, serviceName, functionName) {
    return url + "/" + serviceName + "." + functionName;
}
exports.generateUrl = generateUrl;
//# sourceMappingURL=data:application/json;base64,