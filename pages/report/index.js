"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var app = getApp();
var webAPI = require("../../api/app/AppService");
var globalEnum = require("../../api/GlobalEnum");
var moment = require("moment");
var DAY;
(function (DAY) {
    DAY["MONDAY"] = "\u661F\u671F\u4E00";
    DAY["TUESDAY"] = "\u661F\u671F\u4E8C";
    DAY["WED"] = "\u661F\u671F\u4E09";
    DAY["THURS"] = "\u661F\u671F\u56DB";
    DAY["FRI"] = "\u661F\u671F\u4E94";
    DAY["SAT"] = "\u661F\u671F\u516D";
    DAY["SUN"] = "\u661F\u671F\u65E5";
})(DAY || (DAY = {}));
var reportPage = (function () {
    function reportPage() {
        this.data = {
            year: "",
            month: "",
            week: "",
            date: "30",
            countMonth: 0,
            checkReportGenerated: true,
            reportBoxClass: "checked-box",
            isPrevMonthAllowed: true,
            isNextMonthAllowed: false,
            weekly_isReadArr: [],
            weeklyBadge: 0,
            weeklyReportArr: [],
            currentDate: 0
        };
    }
    reportPage.prototype.onLoad = function () {
        var token = wx.getStorageSync(globalEnum.globalKey_token);
        webAPI.SetAuthToken(token);
    };
    reportPage.prototype.onShow = function () {
        this.loadReportData();
    };
    reportPage.prototype.loadReportData = function () {
        var _this = this;
        var currentDate = moment();
        currentDate = currentDate.add(this.data.countMonth, 'month');
        if (currentDate.isAfter(moment(), 'month')) {
            this.setData({ isPrevMonthAllowed: true, isNextMonthAllowed: false });
        }
        else {
            if (currentDate.isSame(moment(), 'month')) {
                this.setData({ isPrevMonthAllowed: true, isNextMonthAllowed: false });
            }
            else {
                this.setData({ isPrevMonthAllowed: true, isNextMonthAllowed: true });
            }
        }
        var firstDayOfMonth = moment(currentDate).startOf('month').unix();
        var lastDayOfMonth = moment(currentDate).endOf('month').unix();
        var req = {
            date_from: firstDayOfMonth,
            date_to: lastDayOfMonth
        };
        console.log(firstDayOfMonth, lastDayOfMonth);
        wx.showLoading({ title: "加载中..." });
        webAPI.RetrieveUserReports(req).then(function (resp) {
            wx.hideLoading({});
            _this.parseReportData(currentDate, resp);
        }).catch(function (err) {
            console.log(err);
            wx.hideLoading({});
        });
        this.setData({
            year: currentDate.format('YYYY'),
            month: currentDate.format('MM'),
            date: currentDate.format('DD'),
            week: currentDate.week()
        });
    };
    reportPage.prototype.parseReportData = function (currentDate, resp) {
        console.log(currentDate);
        console.log(resp);
        var reportResp = resp.weekly_report;
        var weeklyReport = [];
        for (var index in reportResp) {
            var report = reportResp[index];
            var firstDayOfWeek = moment.unix(report.date_from).format('DD');
            var lastDayOfWeek = moment.unix(report.date_to).format('DD');
            var weekly_report = {
                date: report.date,
                is_read: report.is_read,
                report_url: report.report_url,
                first_day: firstDayOfWeek,
                last_day: lastDayOfWeek,
                is_sample: false
            };
            weeklyReport.push(weekly_report);
        }
        if (currentDate.isSame(moment(), 'month') && reportResp.length == 0) {
            var firstDayOfWeek = currentDate.week(currentDate.week()).day(1).format('DD');
            var lastDayOfWeek = currentDate.week(currentDate.week()).day(7).format('DD');
            var weekly_report = {
                date: currentDate.unix(),
                first_day: firstDayOfWeek,
                last_day: lastDayOfWeek,
                report_url: "https://report.icmoto.cn/userweeklyreport/584",
                is_read: false,
                is_sample: true,
            };
            weeklyReport.push(weekly_report);
        }
        this.setData({
            weeklyReportArr: weeklyReport,
        });
        console.log(this.data.weeklyReportArr);
    };
    reportPage.prototype.countReportBadge = function (resp) {
        console.log(resp);
        var reportNum = 0;
        var reports = resp.daily_report;
        for (var index in reports) {
            var report = reports[index];
            if (!report.is_report_generated && !report.is_food_log_empty) {
                var todayTime = moment().startOf('day').unix();
                console.log(todayTime);
                if (report.date < todayTime || (report.date == todayTime && moment(new Date()).hours > 22)) {
                    reportNum++;
                }
            }
        }
        if (reportNum != 0) {
            wx.setTabBarBadge({
                index: 2,
                text: String(reportNum)
            });
        }
        else {
            wx.removeTabBarBadge({
                index: 2
            });
        }
    };
    reportPage.prototype.nextMonth = function (event) {
        this.setData({ countMonth: this.data.countMonth + 1 });
        this.loadReportData();
    };
    reportPage.prototype.prevMonth = function (event) {
        this.setData({ countMonth: this.data.countMonth - 1 });
        this.loadReportData();
    };
    reportPage.prototype.onWeeklyReportClick = function (event) {
        var reportIndex = event.currentTarget.dataset.reportIndex;
        var report = this.data.weeklyReportArr[reportIndex];
        var reportUrl = report.report_url;
        if (reportUrl) {
            if (report.is_sample) {
                wx.showModal({
                    title: '提示',
                    content: '这是一个样例报告',
                    cancelText: '取消',
                    confirmText: "查看",
                    success: function (res) {
                        if (res.confirm) {
                            wx.navigateTo({ url: "/pages/reportPage/reportPage?url=" + reportUrl });
                        }
                    }
                });
            }
            else {
                wx.navigateTo({ url: "/pages/reportPage/reportPage?url=" + reportUrl });
            }
        }
    };
    return reportPage;
}());
Page(new reportPage());
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUlBLElBQU0sR0FBRyxHQUFHLE1BQU0sRUFBVSxDQUFBO0FBQzVCLGlEQUFtRDtBQUVuRCxpREFBbUQ7QUFDbkQsK0JBQWlDO0FBR2pDLElBQUssR0FRSjtBQVJELFdBQUssR0FBRztJQUNOLG9DQUFjLENBQUE7SUFDZCxxQ0FBZSxDQUFBO0lBQ2YsaUNBQVcsQ0FBQTtJQUNYLG1DQUFhLENBQUE7SUFDYixpQ0FBVyxDQUFBO0lBQ1gsaUNBQVcsQ0FBQTtJQUNYLGlDQUFXLENBQUE7QUFDYixDQUFDLEVBUkksR0FBRyxLQUFILEdBQUcsUUFRUDtBQVdEO0lBQUE7UUFDUyxTQUFJLEdBQUc7WUFDWixJQUFJLEVBQUUsRUFBRTtZQUNSLEtBQUssRUFBRSxFQUFFO1lBQ1QsSUFBSSxFQUFFLEVBQUU7WUFDUixJQUFJLEVBQUUsSUFBSTtZQUNWLFVBQVUsRUFBRSxDQUFDO1lBQ2Isb0JBQW9CLEVBQUUsSUFBSTtZQUMxQixjQUFjLEVBQUUsYUFBYTtZQUM3QixrQkFBa0IsRUFBRSxJQUFJO1lBQ3hCLGtCQUFrQixFQUFFLEtBQUs7WUFFekIsZ0JBQWdCLEVBQUUsRUFBRTtZQUNwQixXQUFXLEVBQUUsQ0FBQztZQUVkLGVBQWUsRUFBRSxFQUFFO1lBQ25CLFdBQVcsRUFBRSxDQUFDO1NBQ2YsQ0FBQTtJQWtLSCxDQUFDO0lBaEtRLDJCQUFNLEdBQWI7UUFDRSxJQUFJLEtBQUssR0FBRyxFQUFFLENBQUMsY0FBYyxDQUFDLFVBQVUsQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUMxRCxNQUFNLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzdCLENBQUM7SUFFTSwyQkFBTSxHQUFiO1FBRUUsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO0lBQ3hCLENBQUM7SUFFTSxtQ0FBYyxHQUFyQjtRQUFBLGlCQXNDQztRQXJDQyxJQUFJLFdB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QVMsRUFBRSxDQUFDLENBQUM7YUFDekU7U0FDRjtJQU1ILENBQUM7SUFDSCxpQkFBQztBQUFELENBQUMsQUFuTEQsSUFtTEM7QUFFRCxJQUFJLENBQUMsSUFBSSxVQUFVLEVBQUUsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBJTXlBcHAgfSBmcm9tICcuLi8uLi9hcHAnXG5pbXBvcnQgeyBlcG9jaCB9IGZyb20gJy4uLy4uL3V0aWxzL3V0aWwnXG5cbmNvbnN0IGFwcCA9IGdldEFwcDxJTXlBcHA+KClcbmltcG9ydCAqIGFzIHdlYkFQSSBmcm9tICcuLi8uLi9hcGkvYXBwL0FwcFNlcnZpY2UnO1xuaW1wb3J0IHsgTWluaVByb2dyYW1Mb2dpbiB9IGZyb20gJy4uLy4uL2FwaS9sb2dpbi9Mb2dpblNlcnZpY2UnO1xuaW1wb3J0ICogYXMgZ2xvYmFsRW51bSBmcm9tICcuLi8uLi9hcGkvR2xvYmFsRW51bSc7XG5pbXBvcnQgKiBhcyBtb21lbnQgZnJvbSAnbW9tZW50JztcbmltcG9ydCB7IFJldHJpZXZlVXNlclJlcG9ydHNSZXEsIFdlZWtseVJlcG9ydENhcmQsIFJldHJpZXZlVXNlclJlcG9ydHNSZXNwIH0gZnJvbSAnLi4vLi4vYXBpL2FwcC9BcHBTZXJ2aWNlT2JqcydcblxuZW51bSBEQVkge1xuICBNT05EQVkgPSBcIuaYn+acn+S4gFwiLFxuICBUVUVTREFZID0gXCLmmJ/mnJ/kuoxcIixcbiAgV0VEID0gXCLmmJ/mnJ/kuIlcIixcbiAgVEhVUlMgPSBcIuaYn+acn+Wbm1wiLFxuICBGUkkgPSBcIuaYn+acn+S6lFwiLFxuICBTQVQgPSBcIuaYn+acn+WFrVwiLFxuICBTVU4gPSBcIuaYn+acn+aXpVwiXG59XG5cbmludGVyZmFjZSBSZXBvcnQge1xuICByZXBvcnRfdXJsOiBzdHJpbmc7XG4gIGRhdGU6IG51bWJlcjtcbiAgaXNfcmVhZDogYm9vbGVhbjtcbiAgZmlyc3RfZGF5OiBzdHJpbmc7XG4gIGxhc3RfZGF5OiBzdHJpbmc7XG4gIGlzX3NhbXBsZTogYm9vbGVhblxufVxuXG5jbGFzcyByZXBvcnRQYWdlIHtcbiAgcHVibGljIGRhdGEgPSB7XG4gICAgeWVhcjogXCJcIixcbiAgICBtb250aDogXCJcIixcbiAgICB3ZWVrOiBcIlwiLFxuICAgIGRhdGU6IFwiMzBcIixcbiAgICBjb3VudE1vbnRoOiAwLFxuICAgIGNoZWNrUmVwb3J0R2VuZXJhdGVkOiB0cnVlLFxuICAgIHJlcG9ydEJveENsYXNzOiBcImNoZWNrZWQtYm94XCIsXG4gICAgaXNQcmV2TW9udGhBbGxvd2VkOiB0cnVlLFxuICAgIGlzTmV4dE1vbnRoQWxsb3dlZDogZmFsc2UsXG5cbiAgICB3ZWVrbHlfaXNSZWFkQXJyOiBbXSxcbiAgICB3ZWVrbHlCYWRnZTogMCxcblxuICAgIHdlZWtseVJlcG9ydEFycjogW10sXG4gICAgY3VycmVudERhdGU6IDBcbiAgfVxuXG4gIHB1YmxpYyBvbkxvYWQoKTogdm9pZCB7XG4gICAgbGV0IHRva2VuID0gd3guZ2V0U3RvcmFnZVN5bmMoZ2xvYmFsRW51bS5nbG9iYWxLZXlfdG9rZW4pO1xuICAgIHdlYkFQSS5TZXRBdXRoVG9rZW4odG9rZW4pO1xuICB9XG5cbiAgcHVibGljIG9uU2hvdygpIHtcbiAgICAvL2xvYWQgZGVmYXVsdCBkYXRhIG9mIHRoZSB3aG9sZSB3ZWVrXG4gICAgdGhpcy5sb2FkUmVwb3J0RGF0YSgpO1xuICB9XG5cbiAgcHVibGljIGxvYWRSZXBvcnREYXRhKCkge1xuICAgIGxldCBjdXJyZW50RGF0ZSA9IG1vbWVudCgpO1xuICAgIGN1cnJlbnREYXRlID0gY3VycmVudERhdGUuYWRkKHRoaXMuZGF0YS5jb3VudE1vbnRoLCAnbW9udGgnKTtcbiAgICBpZiAoY3VycmVudERhdGUuaXNBZnRlcihtb21lbnQoKSwgJ21vbnRoJykpIHtcbiAgICAgIC8vIERvZXNuJ3QgYWxsb3cgdG8gZ28gZnV0dXJlIG1vbnRoXG4gICAgICAodGhpcyBhcyBhbnkpLnNldERhdGEoeyBpc1ByZXZNb250aEFsbG93ZWQ6IHRydWUsIGlzTmV4dE1vbnRoQWxsb3dlZDogZmFsc2UgfSk7XG5cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gQWxsb3cgdG8gZ28gcHJldmlvdXMgbW9udGhcbiAgICAgIGlmIChjdXJyZW50RGF0ZS5pc1NhbWUobW9tZW50KCksICdtb250aCcpKSB7XG4gICAgICAgICh0aGlzIGFzIGFueSkuc2V0RGF0YSh7IGlzUHJldk1vbnRoQWxsb3dlZDogdHJ1ZSwgaXNOZXh0TW9udGhBbGxvd2VkOiBmYWxzZSB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICh0aGlzIGFzIGFueSkuc2V0RGF0YSh7IGlzUHJldk1vbnRoQWxsb3dlZDogdHJ1ZSwgaXNOZXh0TW9udGhBbGxvd2VkOiB0cnVlIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxldCBmaXJzdERheU9mTW9udGggPSBtb21lbnQoY3VycmVudERhdGUpLnN0YXJ0T2YoJ21vbnRoJykudW5peCgpO1xuICAgIGxldCBsYXN0RGF5T2ZNb250aCA9IG1vbWVudChjdXJyZW50RGF0ZSkuZW5kT2YoJ21vbnRoJykudW5peCgpO1xuICAgIGxldCByZXEgPSB7XG4gICAgICBkYXRlX2Zyb206IGZpcnN0RGF5T2ZNb250aCxcbiAgICAgIGRhdGVfdG86IGxhc3REYXlPZk1vbnRoXG4gICAgfTtcbiAgICBjb25zb2xlLmxvZyhmaXJzdERheU9mTW9udGgsIGxhc3REYXlPZk1vbnRoKTtcbiAgICB3eC5zaG93TG9hZGluZyh7IHRpdGxlOiBcIuWKoOi9veS4rS4uLlwiIH0pO1xuICAgIHdlYkFQSS5SZXRyaWV2ZVVzZXJSZXBvcnRzKHJlcSkudGhlbihyZXNwID0+IHtcbiAgICAgIHd4LmhpZGVMb2FkaW5nKHt9KTtcbiAgICAgIHRoaXMucGFyc2VSZXBvcnREYXRhKGN1cnJlbnREYXRlLCByZXNwKTtcblxuICAgIH0pLmNhdGNoKGVyciA9PiB7XG4gICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgICAgd3guaGlkZUxvYWRpbmcoe30pO1xuICAgIH0pO1xuICAgICh0aGlzIGFzIGFueSkuc2V0RGF0YSh7XG4gICAgICB5ZWFyOiBjdXJyZW50RGF0ZS5mb3JtYXQoJ1lZWVknKSxcbiAgICAgIG1vbnRoOiBjdXJyZW50RGF0ZS5mb3JtYXQoJ01NJyksXG4gICAgICBkYXRlOiBjdXJyZW50RGF0ZS5mb3JtYXQoJ0REJyksXG4gICAgICB3ZWVrOiBjdXJyZW50RGF0ZS53ZWVrKClcbiAgICB9KTtcbiAgfVxuXG4gIHB1YmxpYyBwYXJzZVJlcG9ydERhdGEoY3VycmVudERhdGU6IG1vbWVudCwgcmVzcDogYW55KSB7XG4gICAgY29uc29sZS5sb2coY3VycmVudERhdGUpO1xuICAgIGNvbnNvbGUubG9nKHJlc3ApO1xuICAgIGxldCByZXBvcnRSZXNwOiBXZWVrbHlSZXBvcnRDYXJkW10gPSByZXNwLndlZWtseV9yZXBvcnQ7XG4gICAgbGV0IHdlZWtseVJlcG9ydDogUmVwb3J0W10gPSBbXTtcbiAgICBmb3IgKGxldCBpbmRleCBpbiByZXBvcnRSZXNwKSB7XG4gICAgICBsZXQgcmVwb3J0OiBXZWVrbHlSZXBvcnRDYXJkID0gcmVwb3J0UmVzcFtpbmRleF07XG4gICAgICBsZXQgZmlyc3REYXlPZldlZWs6IHN0cmluZyA9IG1vbWVudC51bml4KHJlcG9ydC5kYXRlX2Zyb20pLmZvcm1hdCgnREQnKTtcbiAgICAgIGxldCBsYXN0RGF5T2ZXZWVrOiBzdHJpbmcgPSBtb21lbnQudW5peChyZXBvcnQuZGF0ZV90bykuZm9ybWF0KCdERCcpO1xuICAgICAgbGV0IHdlZWtseV9yZXBvcnQ6IFJlcG9ydCA9IHtcbiAgICAgICAgZGF0ZTogcmVwb3J0LmRhdGUsXG4gICAgICAgIGlzX3JlYWQ6IHJlcG9ydC5pc19yZWFkLFxuICAgICAgICByZXBvcnRfdXJsOiByZXBvcnQucmVwb3J0X3VybCxcbiAgICAgICAgZmlyc3RfZGF5OiBmaXJzdERheU9mV2VlayxcbiAgICAgICAgbGFzdF9kYXk6IGxhc3REYXlPZldlZWssXG4gICAgICAgIGlzX3NhbXBsZTogZmFsc2VcbiAgICAgIH1cbiAgICAgIHdlZWtseVJlcG9ydC5wdXNoKHdlZWtseV9yZXBvcnQpXG4gICAgfVxuXG4gICAgaWYgKGN1cnJlbnREYXRlLmlzU2FtZShtb21lbnQoKSwgJ21vbnRoJykgJiYgcmVwb3J0UmVzcC5sZW5ndGggPT0gMCkge1xuICAgICAgbGV0IGZpcnN0RGF5T2ZXZWVrOiBzdHJpbmcgPSBjdXJyZW50RGF0ZS53ZWVrKGN1cnJlbnREYXRlLndlZWsoKSkuZGF5KDEpLmZvcm1hdCgnREQnKTtcbiAgICAgIGxldCBsYXN0RGF5T2ZXZWVrOiBzdHJpbmcgPSBjdXJyZW50RGF0ZS53ZWVrKGN1cnJlbnREYXRlLndlZWsoKSkuZGF5KDcpLmZvcm1hdCgnREQnKTtcbiAgICAgIGxldCB3ZWVrbHlfcmVwb3J0OiBSZXBvcnQgPSB7XG4gICAgICAgIGRhdGU6IGN1cnJlbnREYXRlLnVuaXgoKSxcbiAgICAgICAgZmlyc3RfZGF5OiBmaXJzdERheU9mV2VlayxcbiAgICAgICAgbGFzdF9kYXk6IGxhc3REYXlPZldlZWssXG4gICAgICAgIHJlcG9ydF91cmw6IFwiaHR0cHM6Ly9yZXBvcnQuaWNtb3RvLmNuL3VzZXJ3ZWVrbHlyZXBvcnQvNTg0XCIsXG4gICAgICAgIGlzX3JlYWQ6IGZhbHNlLFxuICAgICAgICBpc19zYW1wbGU6IHRydWUsXG4gICAgICB9XG4gICAgICB3ZWVrbHlSZXBvcnQucHVzaCh3ZWVrbHlfcmVwb3J0KVxuICAgIH1cblxuXG5cbiAgICAodGhpcyBhcyBhbnkpLnNldERhdGEoe1xuICAgICAgd2Vla2x5UmVwb3J0QXJyOiB3ZWVrbHlSZXBvcnQsXG4gICAgICAvLyB3ZWVrbHlCYWRnZTogbnVtTmV3V2Vla2x5UmVwb3J0XG4gICAgfSk7XG5cbiAgICBjb25zb2xlLmxvZyh0aGlzLmRhdGEud2Vla2x5UmVwb3J0QXJyKVxuICB9XG5cbiAgcHVibGljIGNvdW50UmVwb3J0QmFkZ2UocmVzcDogYW55KSB7XG4gICAgY29uc29sZS5sb2cocmVzcCk7XG4gICAgbGV0IHJlcG9ydE51bSA9IDA7XG4gICAgbGV0IHJlcG9ydHMgPSByZXNwLmRhaWx5X3JlcG9ydDtcbiAgICBmb3IgKGxldCBpbmRleCBpbiByZXBvcnRzKSB7XG4gICAgICBsZXQgcmVwb3J0ID0gcmVwb3J0c1tpbmRleF07XG4gICAgICBpZiAoIXJlcG9ydC5pc19yZXBvcnRfZ2VuZXJhdGVkICYmICFyZXBvcnQuaXNfZm9vZF9sb2dfZW1wdHkpIHtcbiAgICAgICAgbGV0IHRvZGF5VGltZSA9IG1vbWVudCgpLnN0YXJ0T2YoJ2RheScpLnVuaXgoKTtcbiAgICAgICAgY29uc29sZS5sb2codG9kYXlUaW1lKTtcbiAgICAgICAgaWYgKHJlcG9ydC5kYXRlIDwgdG9kYXlUaW1lIHx8IChyZXBvcnQuZGF0ZSA9PSB0b2RheVRpbWUgJiYgbW9tZW50KG5ldyBEYXRlKCkpLmhvdXJzID4gMjIpKSB7ICAgLy9jb3VudCB0b2RheSByZXBvcnRzIHN0YXR1cyBhZnRlciAxOVxuICAgICAgICAgIHJlcG9ydE51bSsrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChyZXBvcnROdW0gIT0gMCkge1xuICAgICAgd3guc2V0VGFiQmFyQmFkZ2Uoe1xuICAgICAgICBpbmRleDogMixcbiAgICAgICAgdGV4dDogU3RyaW5nKHJlcG9ydE51bSlcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB3eC5yZW1vdmVUYWJCYXJCYWRnZSh7XG4gICAgICAgIGluZGV4OiAyXG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgbmV4dE1vbnRoKGV2ZW50OiBhbnkpOiB2b2lkIHtcbiAgICAodGhpcyBhcyBhbnkpLnNldERhdGEoeyBjb3VudE1vbnRoOiB0aGlzLmRhdGEuY291bnRNb250aCArIDEgfSk7XG4gICAgdGhpcy5sb2FkUmVwb3J0RGF0YSgpO1xuICB9XG5cbiAgcHVibGljIHByZXZNb250aChldmVudDogYW55KTogdm9pZCB7XG4gICAgKHRoaXMgYXMgYW55KS5zZXREYXRhKHsgY291bnRNb250aDogdGhpcy5kYXRhLmNvdW50TW9udGggLSAxIH0pO1xuICAgIHRoaXMubG9hZFJlcG9ydERhdGEoKTtcbiAgfVxuXG5cblxuICBwdWJsaWMgb25XZWVrbHlSZXBvcnRDbGljayhldmVudDogYW55KTogdm9pZCB7XG4gICAgbGV0IHJlcG9ydEluZGV4OiBudW1iZXIgPSBldmVudC5jdXJyZW50VGFyZ2V0LmRhdGFzZXQucmVwb3J0SW5kZXg7XG4gICAgbGV0IHJlcG9ydDogUmVwb3J0ID0gdGhpcy5kYXRhLndlZWtseVJlcG9ydEFycltyZXBvcnRJbmRleF07XG4gICAgbGV0IHJlcG9ydFVybDogc3RyaW5nID0gcmVwb3J0LnJlcG9ydF91cmw7XG4gICAgaWYgKHJlcG9ydFVybCkge1xuICAgICAgaWYgKHJlcG9ydC5pc19zYW1wbGUpIHtcbiAgICAgICAgd3guc2hvd01vZGFsKHtcbiAgICAgICAgICB0aXRsZTogJ+aPkOekuicsXG4gICAgICAgICAgY29udGVudDogJ+i/meaYr+S4gOS4quagt+S+i+aKpeWRiicsXG4gICAgICAgICAgY2FuY2VsVGV4dDogJ+WPlua2iCcsXG4gICAgICAgICAgY29uZmlybVRleHQ6IFwi5p+l55yLXCIsXG4gICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gKHJlcykge1xuICAgICAgICAgICAgaWYgKHJlcy5jb25maXJtKSB7XG4gICAgICAgICAgICAgIHd4Lm5hdmlnYXRlVG8oeyB1cmw6IFwiL3BhZ2VzL3JlcG9ydFBhZ2UvcmVwb3J0UGFnZT91cmw9XCIgKyByZXBvcnRVcmwgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3eC5uYXZpZ2F0ZVRvKHsgdXJsOiBcIi9wYWdlcy9yZXBvcnRQYWdlL3JlcG9ydFBhZ2U/dXJsPVwiICsgcmVwb3J0VXJsIH0pO1xuICAgICAgfVxuICAgIH1cblxuXG5cblxuICAgIC8vIFRPIERPOiBVcGRhdGUgYmFkZ2Ugd2hlbiByZXBvcnQgcmVhZFxuICB9XG59XG5cblBhZ2UobmV3IHJlcG9ydFBhZ2UoKSk7Il19