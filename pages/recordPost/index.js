"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var promiseAPI_1 = require("../../api/promiseAPI");
var RecordPostPage = (function () {
    function RecordPostPage() {
        this.data = {
            imageList: [],
            updatedImageList: [],
            recordId: 1,
            indicatorDots: true,
            autoplay: false,
            interval: 5000,
            duration: 1000
        };
    }
    RecordPostPage.prototype.onShow = function () {
        console.log('onShow');
        var that = this;
        if (this.data.recordId !== 0) {
            wx.getStorage({
                key: 'image-list-' + that.data.recordId,
                success: function (res) {
                    console.log("on show imageList:" + res.data);
                    that.setData({
                        imageList: res.data,
                    });
                },
                fail: function (error) {
                    console.log("error:" + error);
                }
            });
        }
    };
    RecordPostPage.prototype.bindAddImage = function () {
        var _this = this;
        var that = this;
        promiseAPI_1.chooseImage({})
            .then(function (res) {
            return Promise.resolve(res);
        }, function (err) {
            return Promise.reject(err);
        })
            .then(function (data) {
            console.log("image:" + data.tempFilePaths);
            that.data.updatedImageList = wx.getStorageSync('image-list-' + that.data.recordId);
            if (!that.data.updatedImageList) {
                that.data.updatedImageList = [];
            }
            that.data.updatedImageList.push({ "imageURL": data.tempFilePaths });
            console.log("add image:" + that.data.updatedImageList);
            return promiseAPI_1.setStorage({
                key: 'image-list-' + that.data.recordId,
                data: that.data.updatedImageList
            });
        })
            .then(function (successMsg) {
            console.log('写入storage成功，返回的消息为：');
            console.log(successMsg);
            console.log("message image:" + that.data.imageList);
            that.setData({
                imageList: _this.data.updatedImageList
            });
        }, function (err) {
            console.log('写入storage失败，返回的消息为：');
            console.log(err);
        });
    };
    return RecordPostPage;
}());
Page(new RecordPostPage());
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG1EQUE2RDtBQUU3RDtJQUFBO1FBRVMsU0FBSSxHQUFHO1lBQ1osU0FBUyxFQUFFLEVBQUU7WUFDYixnQkFBZ0IsRUFBRSxFQUFFO1lBQ3BCLFFBQVEsRUFBQyxDQUFDO1lBQ1YsYUFBYSxFQUFFLElBQUk7WUFDbkIsUUFBUSxFQUFFLEtBQUs7WUFDZixRQUFRLEVBQUUsSUFBSTtZQUNkLFFBQVEsRUFBRSxJQUFJO1NBQ2YsQ0FBQTtJQXNGSCxDQUFDO0lBcEZRLCtCQUFNLEdBQWI7UUFDRSxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBRXRCLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQztRQUNoQixJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxLQUFLLENBQUMsRUFBRTtZQUM1QixFQUFFLENBQUMsVUFBVSxDQUFDO2dCQUNaLEdBQUcsRUFBRSxhQUFhLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRO2dCQUN2QyxPQUFPLFlBQUUsR0FBRztvQkFDVixPQUFPLENBQUMsR0FBRyxDQUFDLG9CQUFvQixHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztvQkFDNUMsSUFBWSxDQUFDLE9BQU8sQ0FBQzt3QkFDcEIsU0FBUyxFQUFFLEdBQUcsQ0FBQyxJQUFJO3FCQUNwQixDQUFDLENBQUE7Z0JBQ0osQ0FBQztnQkFDRCxJQUFJLEVBQUUsVUFBVSxLQUFLO29CQUNuQixPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUMsQ0FBQTtnQkFDL0IsQ0FBQzthQUNGLENBQUMsQ0FBQTtTQUNIO0lBQ0gsQ0FBQztJQUVNLHFDQUFZLEdBQW5CO1FBQUEsaUJBK0RDO1FBOURDLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQztRQUNoQix3QkFBVyxDQUFDLEVBQUUsQ0FBQzthQUNkLElBQUksQ0FDSCxVQUFDLEdBQU87WUFDTixPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUE7UUFDN0IsQ0FBQyxFQUNELFVBQUMsR0FBTztZQUNOLE9BQU8sT0FBTyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQTtRQUM1QixDQUFDLENBQ0Y7YUFDQSxJQUFJLENBQ0QsVUFBQyxJQUFRO1lBQ1AsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBQzNDLElBQUksQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsRUFBRSxDQUFDLGNBQWMsQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUNuRixJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRTtnQkFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLGdCQUFnQixHQUFHLEVBQUUsQ0FBQzthQUFFO1lBQ3JFLElBQUksQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLEVBQUUsVUFBVSxFQUFFLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQyxDQUFDO1lBQ3BFLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztZQUN2RCxPQUFPLHVCQUFVLENBQUM7Z0JBQ2hCLEdBQUcsRUFBRSxhQUFhLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRO2dCQUN2QyxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxnQkFBZ0I7YUFDakMsQ0FBQyxDQUFBO1FBQ0osQ0FBQyxDQUNKO2FBQ0EsSUFBSSxDQUNILFVBQUMsVUFBVTtZQUNULE9BQU8sQ0FBQyxHQUFHLENBQUMscUJBQXFCLENBQUMsQ0FBQTtZQUNsQyxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQ3hCLE9BQU8sQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUNwRCxJQUFJLENBQUMsT0FBTyxDQUFDO2dCQUNYLFNBQVMsRUFBRSxLQUFJLENBQUMsSUFBSSxDQUFDLGdCQUFnQjthQUN0QyxDQUFDLENBQUE7UUFFRixDQUFDLEVBQ0QsVUFBQyxHQUFPO1lBQ04sT0FBTyxDQUFDLEdBQUcsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFBO1lBQ2xDLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUE7UUFDbEIsQ0FBQyxDQUNKLENBQUE7SUF5QkgsQ0FBQztJQUNILHFCQUFDO0FBQUQsQ0FBQyxBQWhHRCxJQWdHQztBQUVELElBQUksQ0FBQyxJQUFJLGNBQWMsRUFBRSxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBzZXRTdG9yYWdlLCBjaG9vc2VJbWFnZX0gZnJvbSAnLi4vLi4vYXBpL3Byb21pc2VBUEknXG5cbmNsYXNzIFJlY29yZFBvc3RQYWdlIHtcblxuICBwdWJsaWMgZGF0YSA9IHtcbiAgICBpbWFnZUxpc3Q6IFtdLFxuICAgIHVwZGF0ZWRJbWFnZUxpc3Q6IFtdLFxuICAgIHJlY29yZElkOjEsIC8vb25seSBzdG9yZSAxIHJlY29yZFxuICAgIGluZGljYXRvckRvdHM6IHRydWUsXG4gICAgYXV0b3BsYXk6IGZhbHNlLFxuICAgIGludGVydmFsOiA1MDAwLFxuICAgIGR1cmF0aW9uOiAxMDAwXG4gIH1cblxuICBwdWJsaWMgb25TaG93KCk6IHZvaWQge1xuICAgIGNvbnNvbGUubG9nKCdvblNob3cnKTtcbiAgICAvL2xvYWQgaW1hZ2UgbGlzdFxuICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICBpZiAodGhpcy5kYXRhLnJlY29yZElkICE9PSAwKSB7XG4gICAgICB3eC5nZXRTdG9yYWdlKHtcbiAgICAgICAga2V5OiAnaW1hZ2UtbGlzdC0nICsgdGhhdC5kYXRhLnJlY29yZElkLFxuICAgICAgICBzdWNjZXNzIChyZXMpe1xuICAgICAgICAgIGNvbnNvbGUubG9nKFwib24gc2hvdyBpbWFnZUxpc3Q6XCIgKyByZXMuZGF0YSk7XG4gICAgICAgICAgKHRoYXQgYXMgYW55KS5zZXREYXRhKHtcbiAgICAgICAgICAgIGltYWdlTGlzdDogcmVzLmRhdGEsXG4gICAgICAgICAgfSlcbiAgICAgICAgfSxcbiAgICAgICAgZmFpbDogZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coXCJlcnJvcjpcIiArIGVycm9yKVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBiaW5kQWRkSW1hZ2UoKTogdm9pZCB7XG4gICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgIGNob29zZUltYWdlKHt9KVxuICAgIC50aGVuKFxuICAgICAgKHJlczphbnkpID0+e1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHJlcylcbiAgICAgIH0sXG4gICAgICAoZXJyOmFueSkgPT57XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnIpXG4gICAgICB9XG4gICAgKVxuICAgIC50aGVuKFxuICAgICAgICAoZGF0YTphbnkpID0+IHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhcImltYWdlOlwiICsgZGF0YS50ZW1wRmlsZVBhdGhzKTtcbiAgICAgICAgICB0aGF0LmRhdGEudXBkYXRlZEltYWdlTGlzdCA9IHd4LmdldFN0b3JhZ2VTeW5jKCdpbWFnZS1saXN0LScgKyB0aGF0LmRhdGEucmVjb3JkSWQpO1xuICAgICAgICAgIGlmICghdGhhdC5kYXRhLnVwZGF0ZWRJbWFnZUxpc3QpIHsgdGhhdC5kYXRhLnVwZGF0ZWRJbWFnZUxpc3QgPSBbXTsgfVxuICAgICAgICAgIHRoYXQuZGF0YS51cGRhdGVkSW1hZ2VMaXN0LnB1c2goeyBcImltYWdlVVJMXCI6IGRhdGEudGVtcEZpbGVQYXRocyB9KTtcbiAgICAgICAgICBjb25zb2xlLmxvZyhcImFkZCBpbWFnZTpcIiArIHRoYXQuZGF0YS51cGRhdGVkSW1hZ2VMaXN0KTtcbiAgICAgICAgICByZXR1cm4gc2V0U3RvcmFnZSh7XG4gICAgICAgICAgICBrZXk6ICdpbWFnZS1saXN0LScgKyB0aGF0LmRhdGEucmVjb3JkSWQsXG4gICAgICAgICAgICBkYXRhOiB0aGF0LmRhdGEudXBkYXRlZEltYWdlTGlzdFxuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICApXG4gICAgLnRoZW4oXG4gICAgICAoc3VjY2Vzc01zZykgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZygn5YaZ5YWlc3RvcmFnZeaIkOWKn++8jOi/lOWbnueahOa2iOaBr+S4uu+8micpXG4gICAgICAgIGNvbnNvbGUubG9nKHN1Y2Nlc3NNc2cpO1xuICAgICAgICBjb25zb2xlLmxvZyhcIm1lc3NhZ2UgaW1hZ2U6XCIgKyB0aGF0LmRhdGEuaW1hZ2VMaXN0KTtcbiAgICAgICAgdGhhdC5zZXREYXRhKHtcbiAgICAgICAgICBpbWFnZUxpc3Q6IHRoaXMuZGF0YS51cGRhdGVkSW1hZ2VMaXN0XG4gICAgICAgIH0pXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKHRoYXQuZGF0YS5pbWFnZUxpc3QpO1xuICAgICAgICB9LFxuICAgICAgICAoZXJyOmFueSkgPT4ge1xuICAgICAgICAgIGNvbnNvbGUubG9nKCflhpnlhaVzdG9yYWdl5aSx6LSl77yM6L+U5Zue55qE5raI5oGv5Li677yaJylcbiAgICAgICAgICBjb25zb2xlLmxvZyhlcnIpXG4gICAgICAgIH1cbiAgICApXG5cbiAgLy8gICB3eC5jaG9vc2VJbWFnZSh7XG4gIC8vICAgICBjb3VudDogMSxcbiAgLy8gICAgIHNpemVUeXBlOiBbJ29yaWdpbmFsJywgJ2NvbXByZXNzZWQnXSxcbiAgLy8gICAgIHN1Y2Nlc3MocmVzKSB7XG4gIC8vICAgICAgIGxldCBpbWFnZXMgPSB3eC5nZXRTdG9yYWdlU3luYygnaW1hZ2UtbGlzdC0nICsgdGhhdC5kYXRhLnJlY29yZElkKVxuICAvLyAgICAgICBjb25zb2xlLmxvZyhcImltYWdlOlwiICsgaW1hZ2VzKVxuICAvLyAgICAgICBsZXQgaW1hZ2VsaXN0OiBhbnlbXSA9IFtdXG4gIC8vICAgICAgIGZvciAodmFyIGltYWdlIG9mIGltYWdlcykge1xuICAvLyAgICAgICAgIGltYWdlbGlzdC5wdXNoKGltYWdlKVxuICAvLyAgICAgICB9XG4gIC8vICAgICAgIGltYWdlbGlzdC5wdXNoKHsgXCJpbWFnZVVSTFwiOiByZXMudGVtcEZpbGVQYXRocyB9KVxuICAvLyAgICAgICBjb25zb2xlLmxvZyhpbWFnZWxpc3QpXG4gIC8vICAgICAgIHd4LnNldFN0b3JhZ2Uoe1xuICAvLyAgICAgICAgIGtleTogJ2ltYWdlLWxpc3QtJyArIHRoYXQuZGF0YS5yZWNvcmRJZCxcbiAgLy8gICAgICAgICBkYXRhOiBpbWFnZWxpc3QsXG4gIC8vICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gKCkge1xuICAvLyAgICAgICAgICAgKHRoYXQgYXMgYW55KS5zZXREYXRhKHtcbiAgLy8gICAgICAgICAgICAgaW1hZ2VMaXN0OiBpbWFnZWxpc3RcbiAgLy8gICAgICAgICAgIH0pXG4gIC8vICAgICAgICAgfVxuICAvLyAgICAgICB9KVxuICAvLyAgICAgfVxuICAvLyAgIH0pXG4gIH1cbn1cblxuUGFnZShuZXcgUmVjb3JkUG9zdFBhZ2UoKSk7Il19